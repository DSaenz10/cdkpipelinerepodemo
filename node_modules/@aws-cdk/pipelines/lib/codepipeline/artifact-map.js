"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineFileSet = exports.ArtifactMap = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cp = require("@aws-cdk/aws-codepipeline");
const blueprint_1 = require("../blueprint");
const helpers_internal_1 = require("../helpers-internal");
/**
 * Translate FileSets to CodePipeline Artifacts.
 *
 * @stability stable
 */
class ArtifactMap {
    constructor() {
        this.artifacts = new Map();
        this.usedNames = new Set();
    }
    /**
     * Return the matching CodePipeline artifact for a FileSet.
     *
     * @stability stable
     */
    toCodePipeline(x) {
        if (x instanceof CodePipelineFileSet) {
            return x._artifact;
        }
        let ret = this.artifacts.get(x);
        if (!ret) {
            // They all need a name
            const artifactName = this.makeUniqueName(`${x.producer.id}.${x.id}`);
            this.usedNames.add(artifactName);
            this.artifacts.set(x, ret = new cp.Artifact(artifactName));
        }
        return ret;
    }
    makeUniqueName(baseName) {
        let i = 1;
        baseName = sanitizeArtifactName(baseName);
        let name = baseName;
        while (this.usedNames.has(name)) {
            name = `${baseName}${++i}`;
        }
        return name;
    }
}
exports.ArtifactMap = ArtifactMap;
_a = JSII_RTTI_SYMBOL_1;
ArtifactMap[_a] = { fqn: "@aws-cdk/pipelines.ArtifactMap", version: "1.118.0" };
function sanitizeArtifactName(x) {
    // FIXME: Does this REALLY not allow '.'? The docs don't mention it, but action names etc. do!
    return x.replace(/[^A-Za-z0-9@\-_]/g, '_');
}
/**
 * A FileSet created from a CodePipeline artifact.
 *
 * You only need to use this if you want to add CDK Pipeline stages
 * add the end of an existing CodePipeline, which should be very rare.
 *
 * @stability stable
 */
class CodePipelineFileSet extends blueprint_1.FileSet {
    constructor(artifact) {
        var _c;
        super((_c = artifact.artifactName) !== null && _c !== void 0 ? _c : 'Imported', helpers_internal_1.PipelineGraph.NO_STEP);
        this._artifact = artifact;
    }
    /**
     * Turn a CodePipeline Artifact into a FileSet.
     *
     * @stability stable
     */
    static fromArtifact(artifact) {
        return new CodePipelineFileSet(artifact);
    }
}
exports.CodePipelineFileSet = CodePipelineFileSet;
_b = JSII_RTTI_SYMBOL_1;
CodePipelineFileSet[_b] = { fqn: "@aws-cdk/pipelines.CodePipelineFileSet", version: "1.118.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3QtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3QtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQWdEO0FBQ2hELDRDQUF1QztBQUN2QywwREFBb0Q7Ozs7OztBQUdwRCxNQUFhLFdBQVc7SUFBeEI7UUFDVSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFDNUMsY0FBUyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7S0EyQnZDOzs7Ozs7SUF4QlEsY0FBYyxDQUFDLENBQVU7UUFDOUIsSUFBSSxDQUFDLFlBQVksbUJBQW1CLEVBQUU7WUFDcEMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLHVCQUF1QjtZQUN2QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVPLGNBQWMsQ0FBQyxRQUFnQjtRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixRQUFRLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxHQUFHLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBNUJILGtDQTZCQzs7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxDQUFTO0lBQ3JDLDhGQUE4RjtJQUM5RixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDN0MsQ0FBQzs7Ozs7Ozs7O0FBR0QsTUFBYSxtQkFBb0IsU0FBUSxtQkFBTztJQWE5QyxZQUFvQixRQUFxQjs7UUFDdkMsS0FBSyxPQUFDLFFBQVEsQ0FBQyxZQUFZLG1DQUFJLFVBQVUsRUFBRSxnQ0FBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQWRNLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBcUI7UUFDOUMsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUM7O0FBSkgsa0RBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3AgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgeyBGaWxlU2V0IH0gZnJvbSAnLi4vYmx1ZXByaW50JztcbmltcG9ydCB7IFBpcGVsaW5lR3JhcGggfSBmcm9tICcuLi9oZWxwZXJzLWludGVybmFsJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEFydGlmYWN0TWFwIHtcbiAgcHJpdmF0ZSBhcnRpZmFjdHMgPSBuZXcgTWFwPEZpbGVTZXQsIGNwLkFydGlmYWN0PigpO1xuICBwcml2YXRlIHVzZWROYW1lcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHRvQ29kZVBpcGVsaW5lKHg6IEZpbGVTZXQpOiBjcC5BcnRpZmFjdCB7XG4gICAgaWYgKHggaW5zdGFuY2VvZiBDb2RlUGlwZWxpbmVGaWxlU2V0KSB7XG4gICAgICByZXR1cm4geC5fYXJ0aWZhY3Q7XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IHRoaXMuYXJ0aWZhY3RzLmdldCh4KTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgLy8gVGhleSBhbGwgbmVlZCBhIG5hbWVcbiAgICAgIGNvbnN0IGFydGlmYWN0TmFtZSA9IHRoaXMubWFrZVVuaXF1ZU5hbWUoYCR7eC5wcm9kdWNlci5pZH0uJHt4LmlkfWApO1xuICAgICAgdGhpcy51c2VkTmFtZXMuYWRkKGFydGlmYWN0TmFtZSk7XG4gICAgICB0aGlzLmFydGlmYWN0cy5zZXQoeCwgcmV0ID0gbmV3IGNwLkFydGlmYWN0KGFydGlmYWN0TmFtZSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgcHJpdmF0ZSBtYWtlVW5pcXVlTmFtZShiYXNlTmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IGkgPSAxO1xuICAgIGJhc2VOYW1lID0gc2FuaXRpemVBcnRpZmFjdE5hbWUoYmFzZU5hbWUpO1xuICAgIGxldCBuYW1lID0gYmFzZU5hbWU7XG4gICAgd2hpbGUgKHRoaXMudXNlZE5hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgbmFtZSA9IGAke2Jhc2VOYW1lfSR7KytpfWA7XG4gICAgfVxuICAgIHJldHVybiBuYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplQXJ0aWZhY3ROYW1lKHg6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIEZJWE1FOiBEb2VzIHRoaXMgUkVBTExZIG5vdCBhbGxvdyAnLic/IFRoZSBkb2NzIGRvbid0IG1lbnRpb24gaXQsIGJ1dCBhY3Rpb24gbmFtZXMgZXRjLiBkbyFcbiAgcmV0dXJuIHgucmVwbGFjZSgvW15BLVphLXowLTlAXFwtX10vZywgJ18nKTtcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIENvZGVQaXBlbGluZUZpbGVTZXQgZXh0ZW5kcyBGaWxlU2V0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21BcnRpZmFjdChhcnRpZmFjdDogY3AuQXJ0aWZhY3QpIHtcbiAgICByZXR1cm4gbmV3IENvZGVQaXBlbGluZUZpbGVTZXQoYXJ0aWZhY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcnRpZmFjdCB0aGlzIGNsYXNzIGlzIHdyYXBwaW5nXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IF9hcnRpZmFjdDogY3AuQXJ0aWZhY3Q7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhcnRpZmFjdDogY3AuQXJ0aWZhY3QpIHtcbiAgICBzdXBlcihhcnRpZmFjdC5hcnRpZmFjdE5hbWUgPz8gJ0ltcG9ydGVkJywgUGlwZWxpbmVHcmFwaC5OT19TVEVQKTtcbiAgICB0aGlzLl9hcnRpZmFjdCA9IGFydGlmYWN0O1xuICB9XG59Il19